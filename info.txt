Registers:
Each register is 64 bits wide, the lower 32- 16- and 8-bit portions
are selectable by a pseudoregister name. Some registers have a certain
purpose.
- rsp: being used as the stack pointer
- rax: the return value from a function
Other registers are all-purpse but have a conventional use depeding on
whether caller-owned or callee owned. 
If binky calls winky, binky is the caller and winky is the callee.
The registers used for the first 6 arguments and return value ar callee
owned. The callee can freely use those registers, and overwrite values.
If rax holds a value that caller wants to retain, the caller must copy
the value before making a call. The callee-owned registers are ideal
for scratch.temprary use.
If the callee intends to use a caller-owned register, it must preserve
its value and restore it before exiting the call. The caller-owned 
registers are used for local state of the caller that needs to  be
preserved across further function calls.

rax     return value, callee owned		eax		ax		al
rdi     1st argument, callee owned		edi		di		dil
rsi		2nd argument, callee owned		esi		si		sil
rdx		3rd argument, callee owned		edx		dx		dl
rcx		4th argument, callee owned 		ecx		cx		cl
r8		5th argument, callee owned		r8d		r8w		r8b
r9		6th argument, callee owned		r9d		r9w		r9b
r10		scratch/temporary, callee owned	r10d	r10w	r10b
r11		scratch/temporary, callee owned	r11d	r11w	r11b
rsp		stack pointer, caller-owned		esp		sp 		spl
rbx		local variable, caller owned	ebx		bx		bl
rbp		local variable, caller owned 	ebp		bp		bpl
r12		local variable, caller owned	r12d	r12w	r12b
r13		local variable, caller owned	r13d	r13w	r13b
r14		local variable, caller owned	r14d	r14w	r14b
r15		local variable, caller owned	r15d	r15w	r15b
rip		instructor pointer
eflags	status/condition code bits


ERRNO
The value of errno shall be defined only after a call to a function
for which it is explicitly stated to be set and until it is changed
by the next function call or if the application assigns it a value.
The value of errno should only be examined when it is indicated to be
valid by a function's return value. Applications shall obtain the
definition of errno by the inclusion of <errno.h>. No function in 
shall set errno to 0. The setting of errno after a successful call to
a function is unspecified unless the description of that function 
specifies that errno shall not be modified.


File management in assembly:

An fd is a 16-bot integer assigned to a file as a file id. When a new
file is created or an existing file is openen, the fd is used to acces
the file.
File descriptors of the standard file streams:
- standard input (stdin) 0
- standard output (stdout) 1
- standard error (stderr) 2

A file pointer specifies the location for a read/write operation in the
file in terms of bytes. Each file is considererd as a sequence of bytes,
and open file is associated with a file pointer that specifies an offset
in bytes, relative to the beginning of the file. When a file is opened, 
the file pointer is set to zero.

System calls related to file handling:
eax		name			ebx					ecx				edx
2		sys_fork		struct pt_regs		-				-
3		sys_read		unsigned int		char *			size_t
4		sys_write		unsigned int		const char *	size_t
5		sys_open		const char *		int				int
6		sys_close		unsigned int 		-				-
8		sys_creat		const char *		int				-
19		sys_lseek		unsigned int		off_t			unsigned int

The system call number need to add an offset off 0x2000000,
because OSX has 4 different class of system calls

HOW TO USE:
- put system call number in the EAX register
- store the arguments to the system call in the registers EBX, ECX, EDX
- result is usually returned in the EAX register

WRITING TO A FILE:
- put the system call sys_write() number 4, in the EAX register
- put the file descriptor in the EBX register
- put the pointer to the output buffer in the EXC register
- put the buffer size (the number of bytes to write) in the EDX registser
The system call returns the actual number of bytes written in the EAX
register, in case of error the error code is in the EAX register.

READING FROM A FILE:
- put the system call sys_read() number 3, in the EAX register
- put the file descriptor in the EBX register
- put the pointer to the input buffer in the ECX register
- put the buffer size (number of bytes to read) in the EDX register
The system call returns the number of bytes read in the EAX register,
in case of error the error code is in the EAX register

The register used for syscall are different, it uses rdi, rsi, rdx, r10
r8 and r9. You cannot pass more than 6 parameters in syscall nor can you
put the parameters on the stack.